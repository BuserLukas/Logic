////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// The following procedures find a path in a given graph if there is one.     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

findPath := procedure(start, goal, R) {
    Paths    := { [start] };
    States   := { start };   // reachable states
    Explored := {};          // explored states
    while (States != Explored) {
        Explored  := States;
        Paths     := {l:l in pathProduct(Paths, R) | !(l[-1] in States)};
        NewStates := { k[-1] : k in Paths };
        Paths     := { arb({ k : k in Paths | k[-1] == s }) : s in NewStates };
        States    += NewStates;
        if (goal in States) {
            return arb({ l : l in Paths | l[-1] == goal });
        }
    }
};

// The procedure call product(P, Q) computes the path product P * Q.
pathProduct := procedure(P, Q) {
    return { X + [ Y[2] ] : X in P, Y in Q | X[-1] == Y[1] };
};

//////////////////////////////////////////////////////////////////////////
//                                                                      //
// The following procedure are only needed to print the solution in a   //
// readable way.                                                        //
//                                                                      //
//////////////////////////////////////////////////////////////////////////    

printPath := procedure(Path) {
    print("Solution:\n");
    for ([A, B, C] in Path) {
        printState(A, B, C);
    }
};

printState := procedure(A, B, C) {
    print("A: ", A, "; B: ", B, "; C: ", C);
}; 






////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// Some auxilliary procedure.                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

// Given a set s, this procedure returns a set containing all lists that contain
// each element of s exactly once. 
// Example: 
// toList({1,2,3}) = {[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]}
toList := procedure(S) {
    // Try to implement this function recursively!


    
};

// This procedure computes the inverse of the binary relation R.
// Example:
// inverse({ ["a", 1], ["b", 2] }) = {[1, "a"], [2, "b"]}
inverse := procedure(R) {

};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// The definition of the relation describing the problem starts here.         //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

All := { 0 .. 3 };

Partitions := "???"; 





print("Number of partitions: $#Partitions$");
States := "???";



print("Number of states: $#States$");
// print("Mögliche Zustände:\n");
// for ([A, B, C] in States) {
//     printState(A, B, C);
// }
// print("\n");

// RacEast beschreibt Zustandsübergänge, bei denen die Lokomotive vom Gleis A nach Osten
// zum Gleis C fährt.
RacEast := "???";



print("Number of trips from A to C via the eastern track: $#RacEast$");
// print("RacEast:\n");
// for ([[A1, B1, C1], [A2, B2, C2]] in RacEast) { 
//     printState(A1, B1, C1);
//     printState(A2, B2, C2);
//     print();
// }
// print("\n");

// RacWest beschreibt Zustandsübergänge, bei denen die Lokomotive vom Gleis A nach Westen
// zum Gleis C fährt.
RacWest := "???";



print("Number of trips from A to C via the western track: $#RacWest$");
print("RACwest:\n");
// for ([[A1, B1, C1], [A2, B2, C2]] in RacWest) {
//     printState(a1, b1, c1);
//     printState(a2, b2, c2);
//     print();
// }
// print("\n");

Rac := RacEast + RacWest;
Rca := "???";

// RBC beschreibt Zustandsübergänge, bei denen die Lokomotive vom Gleis B
// zum Gleis C fährt.
Rbc := "???";



print("Rbc:\n");
// for ([[A1, B1, C1], [A2, B2, C2]] in Rbc) {
//     printState(A1, B1, C1);
//     printState(A2, B2, C2);
//     print();
// }
// print("\n");

Rcb := "???";

// R ist die Menge aller Verbindungen zwischen Punkten.
R := Rac + Rca + Rbc + Rcb;

print("#R = ", #R);  // there should be 1140 elements.

// Am Anfang sind die Waggons auf Gleis A, die Lokomotive ist auf Gleis B.
start := [ [1,2,3], [0], [] ];
// Am Ende sollen die Waggons alle in der Reihenfolge 3,1,2 auf Gleis C
// stehen und die Lokomotive soll wieder auf Gleis B stehen.
goal := [ [], [0], [3,1,2] ];
// Berechne alle möglichen Pfade
Path := findPath(start, goal, R);
// und gebe diesen Schritt für Schritt aus.
print(#Path);    // This path should have length 13.
printPath(Path);

